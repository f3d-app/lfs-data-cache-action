name: 'Copy LFS data'
description: 'Copy LFS data using cache when possible'
inputs:
  type:
    description: 'Whether this action produce/consume LFS data'
    default: 'producer'
  repository:
    description: 'Repository to recover LFS data from'
    required: true
  lfs_sha:
    description: 'LFS sha to recover. If not set, target directory will be used to recover it.'
    required: false
  cache_postfix:
    description: 'A postfix to differentiate between caches'
    default: 'cache'
  target_directory:
    description: 'Directory to copy LFS data to'
    default: 'source'

runs:
  using: "composite"
  steps:

    - name: Check required inputs
      shell: bash
      run: |
        [[ "${{ inputs.repository }}" ]] || { echo "repository input is empty" ; exit 1; }

    - name: Create a working directory
      working-directory: ${{github.workspace}}
      shell: bash
      run: mkdir lfs-data-cache

    - name: Checkout repository without LFS data
      if: inputs.lfs_sha == ''
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}
        path: 'lfs-data-cache/lfs_source'
        fetch-depth: 0
        lfs: false

    - name: Set LFS output var without inputs
      if: inputs.lfs_sha == ''
      working-directory: ${{github.workspace}}/lfs-data-cache/lfs_source
      id: lfs_sha_recover
      shell: bash
      run: echo "lfs_sha=$(git log -n 1 --pretty=format:%H -- `git-lfs ls-files -n`)" >> $GITHUB_OUTPUT

    - name: Cache LFS data
      id: cache-lfs
      uses: actions/cache@v4
      with:
        path: 'lfs-data-cache/lfs_data'
        key: lfs-data-${{inputs.lfs_sha == '' && ${{steps.lfs_sha_recover.outputs.lfs_sha}} || ${{inputs.lfs_sha}} }}-${{inputs.cache_postfix}}

    - name: Checkout LFS data for artifact producer
      if: |
        steps.cache-lfs.outputs.cache-hit != 'true' &&
        inputs.type == 'producer'
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}
        path: 'lfs-data-cache/lfs_data'
        fetch-depth: 0
        lfs: true

    - name: Upload LFS artifact
      if: |
        steps.cache-lfs.outputs.cache-hit != 'true' &&
        inputs.type == 'producer'
      uses: actions/upload-artifact@v4
      with:
        name: lfs-data-${{inputs.cache_postfix}}
        path: 'lfs-data-cache/lfs_data'
        overwrite: true
        include-hidden-files: true

    - name: Download LFS artifact
      id: download-artifact
      if: |
        steps.cache-lfs.outputs.cache-hit != 'true' &&
        inputs.type == 'consumer'
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: lfs-data-${{inputs.cache_postfix}}
        path: 'lfs-data-cache/lfs_data'

    - name: Checkout LFS data (last resort)
      if: |
        steps.cache-lfs.outputs.cache-hit != 'true' &&
        steps.download-artifact.outcome != 'success' &&
        inputs.type == 'consumer'
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}
        path: 'lfs-data-cache/lfs_data'
        fetch-depth: 0
        lfs: true

    - name: Setup LFS data
      working-directory: ${{github.workspace}}
      shell: bash
      run: cmake -P $GITHUB_ACTION_PATH/copy_lfs.cmake 'lfs-data-cache/lfs_data' ${{ inputs.target_directory }}
